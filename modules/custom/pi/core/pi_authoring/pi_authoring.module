<?php

/**
 * @file This provides the inquiry authoring wizard which allows the user to create and
 * edit inquiries.  The authoring system appears in the navigation menu.
 */


/**
 * This is executed before every page request and provides the functionality to include particular files,
 * e.g. custom css and javascript files.
 */
function pi_authoring_init() {
  drupal_add_css(drupal_get_path('module', 'pi_authoring') .'/pi_authoring.css');
}



/**
 * This implements the theme hook for pi_authoring which defines the available theme
 * functions within this module
 * @return array of theme names and arguments
 */
function pi_authoring_theme() {
  return array(
    	'pi_authoring_order_inquiries_form' => array(
  		'arguments' => array('form' => NULL),
  		'file' => 'pi_authoring.inquiry_edit.inc',
    ),
	'pi_authoring_inquiry_phases' => array(
		'file' => 'pi_authoring.inquiry_edit.inc',
    ),
	'pi_authoring_order_phases_form' => array(
		'arguments' => array('form' => NULL),
		'file' => 'pi_authoring.inquiry_edit.inc',
    ),
	'pi_authoring_order_activities_form' => array(
		'arguments' => array('form' => NULL),
		'file' => 'pi_authoring.activities.inc',
    ),
	'pi_authoring_inquiry_activities' => array(
		'arguments' => array('form' => NULL),
		'file' => 'pi_authoring.activities.inc',
    ),
	'pi_authoring_inquiry_list_activities' => array(
		'file' => 'pi_authoring.inquiry_edit.inc',
    ),
  	'pi_authoring_inquiry_stages' => array(
  		'file' => 'pi_authoring.inquiry_edit.inc',
    ),
'pi_authoring_order_stages_form' => array(
	'arguments' => array('form' => NULL),
	'file' => 'pi_authoring.inquiry_edit.inc',
  ),
'pi_authoring_admin_groups_form' => array(
	'arguments' => array('form' => NULL),
	'file' => 'pi_authoring.admin_groups.inc',
  ),
'pi_authoring_admin_group_hierarchy_list' => array(
	'arguments' => array('group_order' => NULL, 'group_list_by_type' => NULL, 'all_groups' => NULL),
	'file' => 'pi_authoring.admin_group_hierarchy.inc',
  ),
'pi_authoring_admin_group_hierarchy_form_class' => array(
	'arguments' => array('form' => NULL),
	'file' => 'pi_authoring.admin_group_hierarchy.inc',
  ),
'pi_authoring_admin_group_hierarchy_form_group' => array(
	'arguments' => array('form' => NULL),
	'file' => 'pi_authoring.admin_group_hierarchy.inc',
  ),
'pi_authoring_admin_group_hierarchy_form_full' => array(
	'arguments' => array('form' => NULL, 'class_or_group'=>''),
	'file' => 'pi_authoring.admin_group_hierarchy.inc',
  )
  );
}

/**
 * Implementation of _help hook for pi_authoring
 */
function pi_authoring_help($path, $arg) {

  $output = '';

  switch ($path)
  {
    case "admin/help#pi_authoring":
      $output = '<p>'.  t("Test Authoring for Basic Inquiry Authoring"). '</p>';
      break;
  }

  return $output;
}

/**
 * Implementation of _perm hook i.e. who has access to the authoring pages
 */
function pi_authoring_perm() {
  return array('access pi_authoring content');
}

/**
 * Implementation of _menu hook which has a info page displaying a table of swim lanes
 * similar to the paper based one for authoring and a set of numbered links to define
 * elements of the inquiry i.e. the inquiry, phases, stages and activities along with
 * audience, groups and individual users who will be able to access them
 */
function pi_authoring_menu() {
  $items = array();

  // Add some items to the administration menu
  $items['admin/nquire'] = array(
      'title' => 'nQuire Inquiry Authoring',
	  'position' => 'right',
	  'weight' => -5,
  	  'page callback' => 'pi_authoring_view',
      'access arguments' => array('administer site configuration'),
  );

  $items['admin/nquire/groups'] = array(
		'title' => 'Set up groups',
		'file' => 'pi_authoring.admin_groups.inc',
		'page callback' => 'pi_authoring_admin_groups',
		'type' => MENU_NORMAL_ITEM,
    	'access arguments' => array('administer site configuration'),
		'weight' => 1,
  );
  
  $items['admin/nquire/add_user_to_groups'] = array(
  		'title' => 'Add user to group',
  		'file' => 'pi_authoring.admin_groups.inc',
  		'page callback' => 'pi_authoring_add_user_to_group',
  		'type' => MENU_NORMAL_ITEM,
  		'access arguments' => array('administer site configuration'),
  		'weight' => 1,
  );

  $items['admin/nquire/group_hierarchy'] = array(
		'title' => 'Organise group hierarchy',
		'file' => 'pi_authoring.admin_group_hierarchy.inc',
		'page callback' => 'pi_authoring_admin_group_hierarchy_view',
		'type' => MENU_NORMAL_ITEM,
    	'access arguments' => array('administer site configuration'),
		'weight' => 2,
  );

  $items['admin/nquire/group_hierarchy/view'] = array(
		'title' => 'View',
		'file' => 'pi_authoring.admin_group_hierarchy.inc',
		'page callback' => 'pi_authoring_admin_group_hierarchy_view',
		'type' => MENU_DEFAULT_LOCAL_TASK,
    	'access arguments' => array('administer site configuration'),
		'weight' => 1,
  );

  $items['admin/nquire/group_hierarchy/edit-class'] = array(
		'title' => 'Assign Classes',
		'file' => 'pi_authoring.admin_group_hierarchy.inc',
		'page callback' => 'pi_authoring_admin_group_hierarchy_edit',
		'page arguments' => array('class'),
		'type' => MENU_LOCAL_TASK,
    	'access arguments' => array('administer site configuration'),
		'weight' => 2,
  );

  $items['admin/nquire/group_hierarchy/edit-group'] = array(
		'title' => 'Assign Groups',
		'file' => 'pi_authoring.admin_group_hierarchy.inc',
		'page callback' => 'pi_authoring_admin_group_hierarchy_edit',
		'page arguments' => array('group'),
		'type' => MENU_LOCAL_TASK,
    	'access arguments' => array('administer site configuration'),
		'weight' => 3,
  );


  $items['admin/nquire/inquires'] = array(
		'title' => 'Inquiries',
		'description' => 'Manage Inquiries.',
		'page callback' => 'pi_authoring_view',
		'type' => MENU_NORMAL_ITEM,
		'access arguments' => array('administer site configuration'),
		'weight' => 3,
  );


  // NOTE: If you change the url below also change pi_authoring_form_pi_inquiry_node_form_alter()
  $items['inquiry/add'] = array(
    	'title' => 'Add',
		'file' => 'pi_authoring.inquiry_add.inc',
		'page callback' => 'pi_authoring_inquiry_add',
		'type' => MENU_CALLBACK,
		'access_callback' => TRUE,
		'access arguments' => array('access pi_authoring content'),
		'weight' => 1,
  );


  // NOTE: If you change the url below also change pi_authoring_form_pi_inquiry_node_form_alter()
  $items['inquiry/%node/edit'] = array(
    	'title' => 'Edit',
		'file' => 'pi_authoring.inquiry_edit.inc',
		'page callback' => 'pi_authoring_inquiry_node_edit',
		'page arguments' => array(1),
		'type' => MENU_LOCAL_TASK,
		'access_callback' => TRUE,
		'access arguments' => array('access pi_authoring content'),
		'weight' => 1,
  );


  $items['inquiry/%node/edit/view'] = array(
		'title' => 'Edit Details',
		'file' => 'pi_authoring.inquiry_edit.inc',
		'page callback' => 'pi_authoring_inquiry_node_edit',
		'page arguments' => array(1),
		'type' => MENU_DEFAULT_LOCAL_TASK,
		'access_callback' => TRUE,
		'access arguments' => array('access pi_authoring content'),
		'weight' => 0,
  );

  $items['inquiry/%node/edit/phases'] = array(
		'title' => 'Edit Phases',
		'file' => 'pi_authoring.inquiry_edit.inc',
		'page callback' => 'pi_authoring_inquiry_phases',
		'page arguments' => array(1),
		'type' => MENU_LOCAL_TASK,
		'access_callback' => TRUE,
		'access arguments' => array('access pi_authoring content'),
		'weight' => 1,
  );

  $items['inquiry/%node/edit/stages'] = array(
		'title' => 'Edit Stages',
		'file' => 'pi_authoring.inquiry_edit.inc',
		'page callback' => 'pi_authoring_inquiry_stages',
		'page arguments' => array(1),
		'type' => MENU_LOCAL_TASK,
		'access_callback' => TRUE,
		'access arguments' => array('access pi_authoring content'),
		'weight' => 2,
  );

  $items['inquiry/%node/edit/activities'] = array(
  		'title' => 'Edit Activities',
  		'file' => 'pi_authoring.inquiry_edit.inc',
  		'page callback' => 'pi_authoring_inquiry_list_activities',
  		'page arguments' => array(1),
  		'type' => MENU_LOCAL_TASK,
  		'access_callback' => TRUE,
  		'access arguments' => array('access pi_authoring content'),
  		'weight' => 3,
  );
  
  
  // NOTE: If you change the url below also change pi_authoring_form_pi_phase_node_form_alter()
  $items['inquiry/%node/phase/add'] = array(
		'title' => 'Add a phase',
		'file' => 'pi_authoring.inquiry_phase_add.inc',
		'page callback' => 'pi_authoring_inquiry_phase_add',
		'page arguments' => array(1),
		'type' => MENU_CALLBACK,
		'access_callback' => TRUE,
		'access arguments' => array('access pi_authoring content'),
		'weight' => 1,
  );

  // NOTE: If you change the url below also change pi_authoring_form_pi_activity_node_form_alter()
  $items['inquiry/%node/activity/add'] = array(
		'title' => 'Add a activity',
		'file' => 'pi_authoring.activities.inc',
		'page callback' => 'pi_authoring_inquiry_activity_add',
		'page arguments' => array(1),
		'type' => MENU_CALLBACK,
		'access_callback' => TRUE,
		'access arguments' => array('access pi_authoring content'),
		'weight' => 1,
  );


  // NOTE: If you change the url below also change pi_authoring_form_pi_activity_node_form_alter()
  $items['phase/%node/activity/add'] = array(
    'title' => 'Add a activity',
    'file' => 'pi_authoring.activities.inc',
    'page callback' => 'pi_authoring_inquiry_activity_add',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
    'access_callback' => TRUE,
    'access arguments' => array('access pi_authoring content'),
    'weight' => 1,
  );

  // NOTE: If you change the url below also change pi_authoring_form_pi_stage_node_form_alter()
  $items['inquiry/%node/stage/add'] = array(
		'title' => 'Add a stage',
		'file' => 'pi_authoring.inquiry_stage_add.inc',
		'page callback' => 'pi_authoring_inquiry_stage_add',
		'page arguments' => array(1),
		'type' => MENU_CALLBACK,
		'access_callback' => TRUE,
		'access arguments' => array('access pi_authoring content'),
		'weight' => 1,
  );


  // NOTE: If you change the url below also change pi_authoring_form_pi_phase_node_form_alter()
  $items['phase/%node/inquiry'] = array(
		'title' => 'View phase inquiry',
		'file' => 'pi_authoring.phase.inc',
		'page callback' => 'pi_authoring_phase_inquiry',
	    'page arguments' => array(1),
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
  );

  // NOTE: If you change the url below also change pi_authoring_form_pi_stage_node_form_alter()
  $items['stage/%node/inquiry'] = array(
		'title' => 'View stage inquiry',
		'file' => 'pi_authoring.stage.inc',
		'page callback' => 'pi_authoring_stage_inquiry',
	    'page arguments' => array(1),
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
  );

  // NOTE: If you change the url below also change pi_authoring_form_pi_activity_node_form_alter()
  $items['activity/%node/inquiry'] = array(
  		'title' => 'View activity inquiry',
  		'file' => 'pi_authoring.activity.inc',
  		'page callback' => 'pi_authoring_activity_inquiry',
  	    'page arguments' => array(1),
  		'access arguments' => array('access content'),
  		'type' => MENU_CALLBACK,
  );

  // NOTE: If you change the url below also change pi_authoring_form_pi_activity_node_form_alter()
  $items['activity/%node/phase'] = array(
    		'title' => 'View activity inquiry',
    		'file' => 'pi_authoring.activity.inc',
    		'page callback' => 'pi_authoring_activity_phase',
    	    'page arguments' => array(1),
    		'access arguments' => array('access content'),
    		'type' => MENU_CALLBACK,
  );


  $items['phase/%node/view'] = array(
		'title' => 'View',
		'type' => MENU_DEFAULT_LOCAL_TASK,
		'weight' => 1
  );

  // NOTE: If you change the url below also change pi_authoring_form_pi_phase_node_form_alter()
  $items['phase/%node/edit'] = array(
		'title' => 'Edit',
		'file' => 'pi_authoring.phase.inc',
		'page callback' => 'pi_authoring_phase_edit',
	    'page arguments' => array(1),
		'access arguments' => array('access pi_authoring content'),
		'type' => MENU_LOCAL_TASK,
		'weight' => 2
  );

  // NOTE: If you change the url below also change pi_authoring_form_pi_phase_node_form_alter()
  $items['phase/%node/edit/details'] = array(
		'title' => 'Edit Details',
		'type' => MENU_DEFAULT_LOCAL_TASK,
		'weight' => 1
  );

  // NOTE: If you change the url below also change pi_authoring_form_pi_phase_node_form_alter()
  $items['phase/%node/edit/activities'] = array(
		'title' => 'Edit Activities',
		'file' => 'pi_authoring.activities.inc',
		'page callback' => 'pi_authoring_activities_edit',
	    'page arguments' => array(1),
		'access arguments' => array('access pi_authoring content'),
		'type' => MENU_LOCAL_TASK,
		'weight' => 2
  );



  // NOTE: If you change the url below also change pi_authoring_form_pi_stage_node_form_alter()
  $items['stage/%node/edit'] = array(
		'title' => 'View stage inquiry',
		'file' => 'pi_authoring.stage.inc',
		'page callback' => 'pi_authoring_stage_edit',
	    'page arguments' => array(1),
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
  );


  // NOTE: If you change the url below also change pi_authoring_form_pi_inquiry_node_form_alter()
  $items['nquire_authoring'] = array(
	  'title' => 'Inquiry Authoring',
  	  'page callback' => 'pi_authoring_view',
  	  'type' => MENU_NORMAL_ITEM,
      'access arguments' => array('access pi_authoring content'),
  );

  return $items;
}

/**
 * This uses hook_form_FORM-ID_alter() set the redirect for editing the inquiry details when
 * accessed via the inquiry editing page rather than the node editing page.
 * It alters $from['redirect'] based on the url that the form was accessed via
 * @param $form
 * @param $form_state
 */
function pi_authoring_form_pi_inquiry_node_form_alter(&$form, &$form_state)
{
  //Strip the request url of the preceeding drupal stuff base_url and ?q=/
  // so that it's possible to work out whether the page request was from /inquiry/%inquiry/edit
  // or from /node/%node/edit
  $drupal_path = str_replace(base_path(), '', request_uri());
  $drupal_path = str_replace('?q=', '', $drupal_path);

  // Split the string into parts to get the inquiry id if it exists...
  $path_parts = explode('/', $drupal_path);

  // Look for /inuqiry/{number}/edit
  // First see if the array is big enough to avoid looking at null refs.
  if(count($path_parts)>= 3)
  {
    // Now check all the parts for vaildity... inquiry NUMBER edit
    if( (strcasecmp($path_parts[0], 'inquiry')==0) && is_numeric($path_parts[1]) )
    {
      // the last part of the url is a special case since it could be either
      // /inquiry/%inquiry/edit OR
      // /inquiry/%inquiry/edit?some=query&string=too OR
      // /inquiry/%inquiry/edit&some=query&string=too
      $valid_strings = array('edit', 'edit?', 'edit&');
      if(in_array(strtolower($path_parts[2]), $valid_strings))
      {
        $nid = $form['nid']['#value'];
        // check if nid is set
        if(isset($nid))
        {
          // if it was from the authoring edit page, then get the node id and redirect back
          // to the authoring page for it...
          $form['#redirect'] = "inquiry/$nid";
        }
      }
    }
  }
  else
  {
    //Otherwise see if it's the new inquiry form, and we have no idea what the new nid will be,
    // so go to the standard  authoring page so Author can click through to it
    // (and maybe set in order as well).
    if(count($path_parts)>= 2)
    {
      // as above the final bit in inquiry/add could end in ? or & so check that
      $valid_strings = array('add', 'add?', 'add&');
      if((strcasecmp($path_parts[0], 'inquiry')==0) &&
      in_array(strtolower($path_parts[1]), $valid_strings))
      {
        $form['#redirect'] = 'nquire_authoring/';
      }
    }
  }
  //otherwise if it's not related to inquiry editing then don't touch the form
}

/**
 * This function uses hook_form_FORM-ID_alter() to set the redirect and the inquiry field as hidden
 * when adding/editing a phase via the nQuire authoring system (detected via checking the url)
 * This deas with 2 curcumstances:
 * 	(1) Adding a new phase to an inquiry via the /inquiry/%inquiry/phase/add url
 *    -> alter form to hide inquiry selection dropdown
 *    -> redirect to /inquiry/%inquiry/phases on completion
 *  (2) Editing a phase via /phase/%phase/edit
 *    -> redirect to /inquiry/%inquiry/phases on completion
 *    		n.b. this isn't directly possible given that inquiry_id isn't known at this stage
 *    			in the form lifecycle so the page is routed via "phase/inquiry" which will redirect to
 *    			the inquiry page automatically (clever, huh?)
 *
 */
function pi_authoring_form_pi_phase_node_form_alter(&$form, &$form_state)
{
  //Strip the request url of the preceeding drupal stuff base_url and ?q=/
  // so that it's possible to work out whether the page request was from /inquiry/%inquiry/phase/add
  // or from /node/%node/edit
  $drupal_path = str_replace(base_path(), '', request_uri());
  $drupal_path = str_replace('?q=', '', $drupal_path);

  // Split the string into parts to get the inquiry id if it exists...
  $path_parts = explode('/', $drupal_path);

  // Look for /inuqiry/{number}/phase/add
  // First see if the array is big enough to avoid looking at null refs.
  if(count($path_parts)>= 4)
  {
    // Now check all the parts for vaildity... inquiry NUMBER phase add
    if( (strcasecmp($path_parts[0], 'inquiry')==0) &&
    is_numeric($path_parts[1]) &&
    (strcasecmp($path_parts[2], 'phase')==0) )
    {
      // the last part of the url is a special case since it could be either
      // /inquiry/%inquiry/phase/add OR
      // /inquiry/%inquiry/phase/add?some=query&string=too OR
      // /inquiry/%inquiry/phase/add&some=query&string=too
      $valid_strings = array('add', 'add?', 'add&');
      if(in_array(strtolower($path_parts[3]), $valid_strings))
      {
        // finall check that it's a valid inquiry id
        $potential_inquiry_id = $path_parts[1];
        $potential_inquiry_node = node_load($potential_inquiry_id);

        //check it's loaded something, then check it's type...
        if(($potential_inquiry_node !== FALSE))
        {
          if($potential_inquiry_node->type == 'pi_inquiry')
          {
            // Hurrah, it pased the test: it's an inquiry node
            // Make the inquiry selection on the form in advance and hide it
            $form['inquiry_nid']['#type'] = 'hidden';
            $form['inquiry_nid']['#value'] = $potential_inquiry_node->nid;
            //@TODO FIXME Set Actor select box to hidden as well...
            //this is only correct if the pase and inquire have to have same actor...I guess so
            $form['phase_actor']['#type'] = 'hidden';
            $form['phase_actor']['#value'] = $potential_inquiry_node->actor_gid;
            // Set redirection to go to the inquiry phase page
            $form['#redirect'] = "inquiry/$potential_inquiry_id/edit/phases";
          }
          else
          {
            // It wasn't a valid inquiry node, so fall back to standard phase editing page
            drupal_set_message(t('An inquiry id ('. check_plain($potential_inquiry_id) . ') was specified for this phase, but the id didn\'t refer to a valid inquiry node; select an inquiry from the form instead.'), 'warning');
            ob_start();
            var_dump($path_parts);
            drupal_set_message('<pre>' . check_plain(ob_get_clean()) . '</pre>');
          }
        }
        else
        {
          // It wasn't a node, so fall back to standard phase editing page
          drupal_set_message(t('An inquiry id ('. check_plain($potential_inquiry_id) . ') was specified for this phase, but there as no item with that id; select an inquiry from the form instead.'), 'warning');
        }
      }
    }
    // ELSE... don't change the form or bother wirh an error message as the url was so wrong it's
    //   probably not intended to make this work!
  }
  else
  {
    // Is it a /phase/%phase/edit url
    if(count($path_parts)>= 3)
    {
      // Now check all the parts for vaildity... inquiry NUMBER phase add
      // Now check all the parts for vaildity... inquiry NUMBER edit
      if( (strcasecmp($path_parts[0], 'phase')==0) && is_numeric($path_parts[1]) )
      {
        // the last part could end in ? and & as well:
        $valid_strings = array('edit', 'edit?', 'edit&');
        if(in_array(strtolower($path_parts[2]), $valid_strings))
        {
          // Get the node id of the form being edited...
          $nid = $form['nid']['#value'];
          // check if nid is set
          if(isset($nid))
          {
            // if it was from the authoring edit page, then get the node id and redirect back
            // to the authoring page for it... via the special redirect page (see function comment)
            $form['#redirect'] = "phase/$nid/inquiry";
          }
        }
      }
    }
  }
  //otherwise if it's not related to inquiry editing then don't touch the form
}


/**
 * This function uses hook_form_FORM-ID_alter() to set the redirect and the inquiry field as hidden
 * when adding/editing a stage via the nQuire authoring system (detected via checking the url)
 * This deas with 2 curcumstances:
 * 	(1) Adding a new stage to an inquiry via the /inquiry/%inquiry/stage/add url
 *    -> alter form to hide inquiry selection dropdown
 *    -> redirect to /inquiry/%inquiry/stages on completion
 *  (2) Editing a phase via /stage/%phase/edit
 *    -> redirect to /inquiry/%inquiry/stages on completion
 *    		n.b. this isn't directly possible given that inquiry_id isn't known at this stage
 *    			in the form lifecycle so the page is routed via "stage/inquiry" which will redirect to
 *    			the inquiry page automatically
 *
 */
function pi_authoring_form_pi_stage_node_form_alter(&$form, &$form_state)
{
  //Strip the request url of the preceeding drupal stuff base_url and ?q=/
  // so that it's possible to work out whether the page request was from /inquiry/%inquiry/stage/add
  // or from /node/%node/edit
  $drupal_path = str_replace(base_path(), '', request_uri());
  $drupal_path = str_replace('?q=', '', $drupal_path);

  // Split the string into parts to get the inquiry id if it exists...
  $path_parts = explode('/', $drupal_path);

  // Look for /inquiry/{number}/stage/add
  // First see if the array is big enough to avoid looking at null refs.
  if(count($path_parts)>= 4)
  {
    // Now check all the parts for vaildity... inquiry NUMBER stage add
    if( (strcasecmp($path_parts[0], 'inquiry')==0) &&
    is_numeric($path_parts[1]) &&
    (strcasecmp($path_parts[2], 'stage')==0) )
    {
      // the last part of the url is a special case since it could be either
      // /inquiry/%inquiry/stage/add OR
      // /inquiry/%inquiry/stage/add?some=query&string=too OR
      // /inquiry/%inquiry/stage/add&some=query&string=too
      $valid_strings = array('add', 'add?', 'add&');
      if(in_array(strtolower($path_parts[3]), $valid_strings))
      {
        // finall check that it's a valid inquiry id
        $potential_inquiry_id = $path_parts[1];
        $potential_inquiry_node = node_load($potential_inquiry_id);

        //check it's loaded something, then check it's type...
        if(($potential_inquiry_node !== FALSE))
        {
          if($potential_inquiry_node->type == 'pi_inquiry')
          {
            // Hurrah, it pased the test: it's an inquiry node
            // Make the inquiry selection on the form in advance and hide it
            $form['inquiry_nid']['#type'] = 'hidden';
            $form['inquiry_nid']['#value'] = $potential_inquiry_node->nid;
            $form['inquiry_nid']['#prefix'] = "<div>";
            // generate the checkboxes again as it's not picked up by ahah helper here!
            $form['stage_phases']['phases'] = pi_stage_form_generate_phase_checkboxes(array(), $potential_inquiry_node->nid);
            // Set redirection to go to the inquiry stage page
            $form['#redirect'] = "inquiry/$potential_inquiry_id/edit/stages";
             
          }
          else
          {
            // It wasn't a valid inquiry node, so fall back to standard stage editing page
            drupal_set_message(t('An inquiry id ('. check_plain($potential_inquiry_id) . ') was specified for this stage, but the id didn\'t refer to a valid inquiry node; select an inquiry from the form instead.'), 'warning');
          }
        }
        else
        {
          // It wasn't a node, so fall back to standard stage editing page
          drupal_set_message(t('An inquiry id ('. check_plain($potential_inquiry_id) . ') was specified for this stage, but there as no item with that id; select an inquiry from the form instead.'), 'warning');
        }
      }
    }
    // ELSE... don't change the form or bother wirh an error message as the url was so wrong it's
    //   probably not intended to make this work!
  }
  else
  {

    // Is it a /stage/%stage/edit url
    if(count($path_parts)>= 3)
    {
      // Now check all the parts for vaildity... inquiry NUMBER stage add
      // Now check all the parts for vaildity... inquiry NUMBER edit
      if( (strcasecmp($path_parts[0], 'stage')==0) && is_numeric($path_parts[1]) )
      {
        // the last part could end in ? and & as well:
        $valid_strings = array('edit', 'edit?', 'edit&');
        if(in_array(strtolower($path_parts[2]), $valid_strings))
        {
          // Get the node id of the form being edited...
          $nid = $form['nid']['#value'];
          // check if nid is set
          if(isset($nid))
          {
            // if it was from the authoring edit page, then get the node id and redirect back
            // to the authoring page for it... via the special redirect page (see function comment)
            $form['#redirect'] = "stage/$nid/inquiry";
          }
        }
      }
    }
  }
  //otherwise if it's not related to inquiry editing then don't touch the form
}



/**
 * This function uses hook_form_FORM-ID_alter() to set the redirect and the inquiry field as hidden
 * when adding/editing an activity via the nQuire authoring system (detected via checking the url)
 * This deas with 2 curcumstances:
 * 	(1) Adding a new activity to an inquiry via the /inquiry/%inquiry/activity/add url
 *    -> alter form to hide inquiry selection dropdown
 *    -> redirect to /inquiry/%inquiry/phases on completion
 *  (2) Editing a phase via /phase/%phase/activity/add
 *    -> redirect to /inquiry/%inquiry/phases on completion
 *    		n.b. this isn't directly possible given that inquiry_id isn't known at this stage
 *    			in the form lifecycle so the page is routed via "phase/inquiry" which will redirect to
 *    			the inquiry page automatically (clever, huh?)
 *
 */
function pi_authoring_form_pi_activity_node_form_alter(&$form, &$form_state)
{
  //Strip the request url of the preceeding drupal stuff base_url and ?q=/
  // so that it's possible to work out whether the page request was from /inquiry/%inquiry/phase/add
  // or from /node/%node/edit
  $drupal_path = str_replace(base_path(), '', request_uri());
  $drupal_path = str_replace('?q=', '', $drupal_path);
  // Split the string into parts to get the inquiry id if it exists...
  $path_parts = explode('/', $drupal_path);
  //if AHAH helper is used, then redirect is cleared, so reset it here....
  if(count($path_parts)==2)
  {
    if ((strcasecmp($path_parts[0], 'ahah_helper')===0) && (strcasecmp(urldecode($path_parts[1]),'groups][info')===0))  
    {
      $form['#redirect'] = $form_state['storage']['redirect-submit'];
    }
  }
  // Look for /inquiry/{number}/activity/add
  // and
  // Look for /phase/{number}/activity/add
  // First see if the array is big enough to avoid looking at null refs.
  if(count($path_parts)>= 4)
  {
    // Now check all the parts for vaildity... inquiry NUMBER phase add
    if(strcasecmp($path_parts[0], 'inquiry') || strcasecmp($path_parts[0], 'phase'))
    {
      $destination = $path_parts[0];

      if( is_numeric($path_parts[1]) && (strcasecmp($path_parts[2], 'activity')==0) )
      {
        // the last part of the url is a special case since it could be either
        // /[inquiry|phase]/%inquiry/activity/add OR
        // /[inquiry|phase]/%inquiry/phaactivityse/add?some=query&string=too OR
        // /[inquiry|phase]/%inquiry/pactivityhase/add&some=query&string=too
        $valid_strings = array('add', 'add?', 'add&');
        if(in_array(strtolower($path_parts[3]), $valid_strings))
        {
          // finall check that it's a valid inquiry id
          $potential_inquiry_or_phase_id = $path_parts[1];
          $potential_inquiry_or_phase_node = node_load($potential_inquiry_or_phase_id);

          //check it's loaded something, then check it's type...
          if(($potential_inquiry_or_phase_node !== FALSE))
          {
            if($potential_inquiry_or_phase_node->type == ('pi_' . $destination))
            {
              // Hurrah, it pased the test: it's an inquiry node
              // Make the inquiry selection on the form in advance and hide it
              $form['inquiry_nid']['#type'] = 'hidden';
              //Generate inquiry phase and stage select

              //@TODO FIXME Set Actor select box to hidden as well...
              //this is only correct if the phase and inquiry need to have same actor...I guess so
              $form['actor']['#type'] = 'hidden';
              // Set redirection to go to the inquiry phase page
              if($destination=='phase')
              {
                //adding from phase page
                $form['inquiry_nid']['#value'] = $potential_inquiry_or_phase_node->inquiry_nid;

                $form['activity_phases_stages']['phase_nid'] = _pi_activity_form_generate_phase_select($potential_inquiry_or_phase_node->inquiry_nid, $potential_inquiry_or_phase_node->nid);
                $form['activity_phases_stages']['stages'] = _pi_activity_form_generate_stage_select($potential_inquiry_or_phase_node->nid);

                $form['groups']['selects']['gid']['#default_value'] = $potential_inquiry_or_phase_node->phase_actor;

                $form['#redirect'] = "phase/$potential_inquiry_or_phase_id/edit/activities";
              }
              else
              {
                //adding from inquiry page inquiry
                $form['inquiry_nid']['#value'] = $potential_inquiry_or_phase_node->nid;

                $form['activity_phases_stages']['phase_nid'] = _pi_activity_form_generate_phase_select($potential_inquiry_or_phase_node->nid);
                $form['activity_phases_stages']['stages'] = _pi_activity_form_generate_stage_select($potential_inquiry_or_phase_node->nid);

                $form['groups']['selects']['gid']['#default_value'] = $potential_inquiry_or_phase_node->actor_gid;

                $form['#redirect'] = "inquiry/$potential_inquiry_or_phase_id/edit/phases";
              }
              $form['redirect-submit'] = array('#type' => 'hidden', '#value' => $form['#redirect']);
            }
            else
            {
              // It wasn't a valid inquiry node, so fall back to standard phase editing page
              drupal_set_message(t("An inquiry id (!id) was specified for this activity, but the id didn't refer to a valid inquiry node; select an inquiry from the form instead.", array("'!id" => $potential_inquiry_or_phase_id)), 'warning');
            }
          }
          else
          {
            // It wasn't a node, so fall back to standard phase editing page
            drupal_set_message(t('An inquiry id (!id) was specified for this activity, but there as no item with that id; select an inquiry from the form instead.', array('!id' => $potential_inquiry_or_phase_id)), 'warning');
          }
        }
      }
    }
    // ELSE... don't change the form or bother wirh an error message as the url was so wrong it's
    //   probably not intended to make this work!
  }
  else
  {
    // Is it a /activity/%activity/admin/edit url
    if(count($path_parts)>= 4)
    {
      // Now check all the parts for vaildity... activity/NUMBER/admin/edit
      if( (strcasecmp($path_parts[0], 'activity')==0) && is_numeric($path_parts[1])  && (strcasecmp($path_parts[0], 'admin')==0))
      {
        // the last part could end in ? and & as well:
        $valid_strings = array('edit', 'edit?', 'edit&');
        if(in_array(strtolower($path_parts[2]), $valid_strings))
        {
          // Get the node id of the form being edited...
          $nid = $form['nid']['#value'];
          // check if nid is set
          if(isset($nid))
          {
            // if it was from the authoring edit page, then get the node id and redirect back
            // to the authoring page for it... via the special redirect page (see function comment)
            $form['#redirect'] = "activity/$nid/phase";
            $form['redirect-submit'] = array('#type' => 'hidden', '#value' => $form['#redirect']);
          }
        }
      }
    }
  }
  $form['buttons']['submit']['#submit'][] = 'pi_authoring_pi_activity_node_form_submit';
  //otherwise if it's not related to inquiry editing then don't touch the form
}


/**
 * Custom submit handler. Overwrites the form redirection variable.
 * Needed because AHAH helper messes up rediredt
 *
 */
function pi_authoring_pi_activity_node_form_submit($form, &$form_state)
{
  if($form_state['storage']['redirect-submit']!=NULL)
  {
    $form['#redirect'] = $form_state['storage']['redirect-submit'];
  }
}


//-------------------------------------------------------------------------------------------------------------------
//----------------------------------------------Table View of Inquiry------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------

/**
 * This is the start page for inquiry authoring, it will allow the user to select an existing
 * inquiry for editing, or to create a new inquiry.
 */
function pi_authoring_view()
{
  $content = '';

  // Wrap the contet in a named element to allow css styles to be unique to this module
  $content .="<div id='pi_authoring'>";

  $content .= "<p>To create a new inquiry enter the details " .
  l("here", "inquiry/add")  . " .  " .
		"To edit an existing inquiry select it from the list below.</p>\n";

  $inquiry_nids = pi_inquiry_load_nids();

  $rows = array();
  if(!empty($inquiry_nids))
  {
    $content .= "<h2>Current Inquiries</h2>\n";
    $content .= drupal_get_form('pi_authoring_order_inquiries_form', $inquiry_nids);
  }
  else
  {
    // Display a warning message to the user as there are no phases yet defined
    drupal_set_message("No inquires created so far.", 'warning', FALSE);
  }

  $content .="</div>\n";  // End of '#pi_authoring'
  return $content;
}

/**
 * This function creates the form for draggable inquiry ordering on the inquiry authoring page
 * @param $inquiries array of each of the inquiry nids in the inquiry
 * @param db_result_object $inquiry the inquiry these phases belong to used to redirect user back to
 *  inquiry phases page
 * @return array describing a form in drupal api format
 */
function pi_authoring_order_inquiries_form(&$form_state, $inquiries) {
  $form = array();
  $form['#theme'] = 'pi_authoring_order_inquiries_form';

  $form['#title'] = 'Inquiries';

  $form['order_inquiries_inquiries'] = array(
		'#tree' => TRUE
  );

  $position = 0;
  foreach($inquiries as $inquiry_nid)
  {
    $inquiry = node_load($inquiry_nid);
    $form['order_inquiries_inquiries'][$inquiry->nid]['title'] =
    array(
		 		'#value' => l($inquiry->title, 'inquiry/' . $inquiry->nid . '/edit'),
    );
    $form['order_inquiries_inquiries'][$inquiry->nid]['body'] =
    array(
				'#value' => $inquiry->body
    );
    $form['order_inquiries_inquiries'][$inquiry->nid]['delete'] =
    array(
				'#value' => l(t("Delete"), 'nQuire/inquiry/' . $inquiry->nid . '/delete')
    );
    $form['order_inquiries_inquiries'][$inquiry->nid]['weight'] =
    array(
	            '#type'          => 'weight',
	            '#delta'         => count($inquiries),
	            '#default_value' => $position
    );

    $position++;
  }
  $form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Save'),
  );
  return $form;
}

/**
 * This handles the data from the inquiry ordering form, it does not take the actual order
 * numbers provided by the form, but reorders them from 0..(n-1) so that the weight data in the
 * table is always consistant and not surceptable to errors introduced by bad post data.
 * @param array $form drupal api form data
 * @param array $form_state drupal api submitted form data
 */
function pi_authoring_order_inquiries_form_submit($form, &$form_state)
{
  //firep($form_state['values']['order_inquiries_inquiries'], "Form data");
  $inquiry_order = array();

  //put all the phases in an array
  foreach($form_state['values']['order_inquiries_inquiries'] as $inquiry_nid => $new_order)
  {
    $inquiry_order[$inquiry_nid] = $new_order;
  }
  //sort the elements by the new order
  asort($inquiry_order);
  //firep(var_dump($phase_order), "New order");

  // Now reorder from 0..n based on this order
  $count = 0;
  foreach($inquiry_order as $inquiry_nid => $order)
  {
    $inquiry_order[$inquiry_nid] = $count++;
  }

  // This should really be done in a transation, but it's not possible in the drupal api as you
  // have to know all about the other table that may be locked..

  foreach($inquiry_order as $inquiry_nid => $weight)
  {
    if($inquiry = node_load($inquiry_nid))
    {
      $inquiry->weight = $weight;
      node_save($inquiry);
    }
    else
    {
      drupal_set_message(t("Can't find Inquiry $inquiry_nid"), 'error');
    }
  }
}




