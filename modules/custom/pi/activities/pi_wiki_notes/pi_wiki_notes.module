<?php

// $Id: pi_wiki_notes.module,v 1.2 2009/06/11 09:55:10 ou_mbg Exp $

/**
 * @file
 * Module for creating "pi_wiki_notes" node type
 */

/**
 * Implementation of hook_node_info().
 */
function pi_wiki_notes_node_info() {

	return array(
			'pi_wiki_notes' => array(
					'name' => t('Inquiry group notes'), // Required.
					'module' => 'pi_wiki_notes', // Required.
					'description' => t('Keep notes related to a topic'), // Required.
					'has_title' => TRUE,
					'title_label' => t('Group notes'),
					'has_body' => TRUE,
					'body_label' => t('Group notes'),
					'locked' => TRUE)
	);
}


/**
 * Implementation of hook_access().
 */
function pi_wiki_notes_access($op, $node, $account) {
	return FALSE;
}


function pi_wiki_notes_edit_content_label() {
	return t('Edit');
}
/**
 * Implementation of hook_form().
 */
function pi_wiki_notes_form(&$node) {

	// Get metadata for this node type
	// (we use it for labeling title and body fields).
	// We defined this in pi_wiki_notes_node_info().
	$type = node_get_types('type', $node);

	$form['title'] = array(
			'#type' => 'hidden',
			'#title' => check_plain($type->title_label),
			'#required' => FALSE,
			'#default_value' => $type->title_label,
			'#weight' => -5
	);

	$form['body_filter']['notes'] = array(
			'#type' => 'textarea',
			'#required' => FALSE,
			'#default_value' => $node->notes,
			'#description' => '',
			'#resizable' => TRUE,
			'#rows' => 8,
			'#cols' => 40,
			'#weight' => -2
	);
  
  $form['body_filter']['format'] = filter_form(2);
  
	return $form;
}


/**
 * Implementation of hook_insert().
 */
function pi_wiki_notes_insert($node) {
	db_query("INSERT INTO {pi_wiki_notes} (nid, vid, notes) VALUES ('%d', '%d', '%s')", $node->nid, $node->vid, $node->notes);
}

/**
 * Implementation of hook_update().
 */
function pi_wiki_notes_update($node) {
	if ($node->revision) {
		pi_wiki_notes_insert($node);
	} else {
		db_query("UPDATE {pi_wiki_notes} SET notes = '%s' WHERE vid = %d", $node->notes, $node->vid);
	}
}

/**
 * Implementation of hook_delete().
 */
function pi_wiki_notes_delete(&$node) {
// Delete the related information we were saving for this node.
	db_query('DELETE FROM {pi_wiki_notes} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_load().
 */
function pi_wiki_notes_load($node) {
	return db_fetch_object(db_query('SELECT * FROM {pi_wiki_notes} WHERE vid = %d', $node->vid));
}

/**
 * Implementation of hook_view().
 */
function pi_wiki_notes_view($node, $teaser = FALSE, $page = FALSE) {
	$node = node_prepare($node, $teaser);
	return $node;
}

function pi_wiki_notes_display_content_in_activity($node, $options) {	
	$content = NULL;
	if ($options['edit']) {
		$content = node_page_edit($node);
	} else {
		$content = $node && $node->notes ? check_markup($node->notes, 2, FALSE) : array(
        'empty' => TRUE,
        'content' => t('Create your notes.'),
        'edit_link' => TRUE
    );
	}
	
	return array(
			'mode' => 'twocolumns',
			'rows' => array(
					array('', $content),
			),
	);
}



function pi_wiki_notes_links_edit_content_click() {
  return 'create';
}

