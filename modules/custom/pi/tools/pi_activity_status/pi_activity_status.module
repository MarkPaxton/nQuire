<?php


function get_activity_participants($node_details) {

	$content = t("Selected activity: " . $node_details->activity_id);

	/*get audience type for the activity*/
	//load activity
	$loaded_activity = node_load($node_details->activity_id);
	//get the audience
	$audience = $loaded_activity->audience;
	$content .= t(" audience:" . $audience);

	$loaded_activity_actor = pi_activity_load_activity_actor($node_details->activity_id);
	$gid_actor = $loaded_activity_actor[0]["gid"];
	$content .= t(" gid:" . $gid_actor );
	/*get autual audiences for this i/s/p/a*/
	//get the grouping for this i/s/p/a

	/* CANDIDATE_FIX 
	 * error: undefined function get_grouping()
	 * solution: include pi.depricated.ind
	 */
	module_load_include("inc", "pi", "pi.depricated");
	
	$grouping = get_grouping ($node_details->inquiry_id, $node_details->stage_id, $node_details->phase_id, $node_details->activity_id);

	$groups = get_groups_from_grouping ($grouping);

	$content .= t(" grouping:" . $grouping);

	//pull out the actual audiences

	$content .= " groups:";
	$groups_array = array();
	while ($gid = db_fetch_object($groups)) {
		$groups_array[] = $gid->gid;
		$content .= t($gid->gid);
	}

	$activity_participants = array();
	$content .= " type:";
	//the actor is a uid
	//use the uid
	if ($uid_actor) {
		$content .= "uid";
		$activity_participants[] = $uid_actor;
	}

	//the actor is a gid for an individual activity
	//get the individual members of the gid
	elseif ($gid_actor && $audience == "individual") {
		$content .= "gid/individual";
		$members = get_members_of_group($gid_actor);
		while ($member = db_fetch_object($members)) {
			$activity_participants[] = $member->uid;
		}

	}

	//the actor is a gid for a group activity
	//use the gid if it is a group
	//get the group members (from grouping) if the gid is a class/multiclass
	elseif ($gid_actor && $audience == "group")
	{
		$content .= "gid/group";
		$query = "SELECT type FROM {pi_group_type} WHERE gid = %d";
		$actor_type = db_result(db_query($query, $gid_actor));
		$content .= " type:" . $actor_type;
		if ($actor_type == "group" && in_array($gid_actor, $groups_array)) {
			$activity_participants[] = $gid_actor;
		}
		elseif ($actor_type == "class") {
			//find groups in gid class from array
			//find which members of groups array are groups in this class

			$group_query = "SELECT {pi_group_hierarchy}.gid FROM {pi_group_hierarchy}, {pi_group_type} WHERE {pi_group_hierarchy}.parent_gid = %d AND {pi_group_hierarchy}.gid = {pi_group_type}.gid AND {pi_group_type}.type = 'group'";
			$group_query_result = db_query($group_query, $gid_actor);
			$groups_of_actor_class = array();
			$content .= " groups of class:";
			while ($single_group = db_fetch_object($group_query_result)) {
				$groups_of_actor_class[] = $single_group->gid;
				$content .= $single_group->gid;
			}
			$activity_participants = array_intersect($groups_of_actor_class, $groups_array);

		}
		elseif ($actor_type == "multiclass") {
			//find groups within the multiclass
			//find which are in the current grouping
			$group_query = "SELECT child.gid, parent.parent_gid FROM {pi_group_hierarchy} as parent, {pi_group_hierarchy} as child, {pi_group_type} as group WHERE parent.parent_gid = %d AND parent.gid = child.parent_gid AND parent.parent_gid IS NOT NULL AND group.gid = child.gid AND group.type = 'group'";
			$group_query_result = db_query($group_query, $gid_actor);
			$groups_of_actor_class = array();
			$content .= " groups of muticlass:";
			while ($single_group = db_fetch_object($group_query_result)) {
				$groups_of_actor_class[] = $single_group->gid;
				$content .= $single_group->gid;
			}
			$activity_participants = array_intersect($groups_of_actor_class, $groups_array);
		}
	}

	//the actor is a gid for a class activity
	//use the gid if it is a class
	//get the class members (from grouping) if it is a multiclass
	elseif ($gid_actor && $audience == "class")
	{
		$content .= "gid/class";
		$query = "SELECT type FROM {pi_group_type} WHERE gid = %d";
		$actor_type = db_result(db_query($query, $gid_actor));
		$content .= " type:" . $actor_type;
		if ($actor_type == "class" && in_array($gid_actor, $groups_array))
		{
			$activity_participants[] = $gid_actor;
		}
		elseif ($actor_type == "multiclass")
		{
			//find the classes of the multiclass
			$group_query = "SELECT {pi_group_hierarchy}.gid FROM {pi_group_hierarchy}, {pi_group_type} WHERE {pi_group_hierarchy}.parent_gid = %d AND {pi_group_hierarchy}.gid = {pi_group_type}.gid AND {pi_group_type}.type = 'class'";
			$group_query_result = db_query($group_query, $gid_actor);
			$groups_of_actor_class = array();
			$content .= " classes of multiclass:";
			while ($single_group = db_fetch_object($group_query_result))
			{
				$groups_of_actor_class[] = $single_group->gid;
				$content .= $single_group->gid;
			}
			$activity_participants = array_intersect($groups_of_actor_class, $groups_array);
		}
	}

	//the actor is a gid for a multiclass activity
	//the gid should be a multiclass
	elseif ($gid_actor && $audience == "muticlass")
	{
		$content .= "gid/multiclass";
		$content .= "gid/multiclass";
		$query = "SELECT type FROM {pi_group_type} WHERE gid = %d";
		$actor_type = db_result(db_query($query, $gid_actor));
		$content .= " type:" . $actor_type;
		if ($actor_type == "multiclass" && in_array($gid_actor, $groups_array))
		{
			$activity_participants[] = $gid_actor;
		}
	}


	$result = array('activity_participants' => $activity_participants, 'gid_actor' => $gid_actor, 'uid_actor' => $uid_actor, 'audience' => $audience, 'name' => $loaded_activity->name);

	return $result;
}


function pi_activity_status_block($op = 'list', $delta = 0, $edit = array())
{
	switch ($op)
	{
		case 'list':
			$blocks[0]['info'] = t('Activity Status');
			return $blocks;

		case 'view':
			/**
			 * the block shows the status of the current activity shown in the toolkit
			 * this will be part of the teacher toolkit set up and will show the visible_status
			 * of the activity i.e. start, in_progress, view or unavailable.
			 * The teacher can then use this info to judge if the students or group needs help.
			 **/
			global $user;

			$node_details = get_inquiry_details_from_current_path();
			if (isset($node_details->inquiry_id))
			{
				$node_details_inquiry_id = $node_details->inquiry_id;
			}
			else
			{
				$node_details_inquiry_id = '';
			}

			$teacher_tools = array();
			if (in_array(arg(0), array('inquiry', 'phase', 'activity', 'set_stage')))
			{
				$teacher_tools[] = l(t("Change stage"), 'set_stage/' . $node_details->inquiry_id, array('query'=> t('destination=inquiry/'. $node_details->inquiry_id)));
			}
			else
			{
				$teacher_tools[] = t("Change stage");
			}
				
			//get current status for use as destination
			if (is_numeric($node_details->activity_id))
			{
				$node_function = pi_activity_get_node_function($node_details->activity_id, $user->uid);
					
					
				if(arg(0) == 'activity') {
					$teacher_tools[] = l(t("Change current activity status"), 'set_status/' . $node_details->activity_id, array('query'=> t('destination=activity/'.  $node_details->activity_id . '/'. $node_function)));
				}
				else {
			  $teacher_tools[] = t("Change current activity status");
				}
				$content = t(theme('item_list', $teacher_tools, NULL, 'ul', array('class' => 'menu')));

					
				$ap_result = get_activity_participants($node_details);
				$audience = $ap_result["audience"];
				$activity_participants = $ap_result["activity_participants"];
				$activity_name = $ap_result["name"];
					
				/*get the status for each actual audience*/
				//use activity status
				$content .= "<strong>" . $activity_name . ":</strong>";
				$content .= generate_status_table($activity_participants, $node_details, $audience);
			}

			$block['subject'] = "Teacher tools";
			$block['content'] = $content;

			return $block;
	}
}

function generate_status_table($activity_participants, $node_details, $audience) {

	$image_path = "/" . drupal_get_path( 'module', 'pi' ) . '/images/';
	$status_image = array();
	$status_image["start"] = "creatable.png";
	$status_image["edit"] = "editable.png";
	$status_image["view"] = "viewable.png";
	$status_image["unavailable"] = "unavailable.png";

	$headings = array(ucwords($audience), "Status");
	$table = array();
	
	/* CANDIDATE_FIX
	 * error: undefined function get_visible_status_of_activity()
	 * solution: call pi_activity_get_visible_status_of_activity() instead.
	 * This change is applied to lines 246 and 260 below.
	 */

	if ($audience == "individual") {
		foreach ($activity_participants as $activity_participant) {
			if ($activity_participant != 1) {
				$table[] = array(t(get_user_name($activity_participant)), t("<img src=\"" . $image_path. $status_image[pi_activity_get_visible_status_of_activity($node_details->inquiry_id, $node_details->activity_id, $activity_participant)] . "\"/>"));
			}
		}
	}

	else {
		foreach ($activity_participants as $activity_participant) {
			$members_of_group = get_members_of_group($activity_participant);
			$group_member = db_fetch_object($members_of_group);

			//I need this because uid 1 is admin and a member of every group
			if ($group_member->uid == 1) {
				$group_member = $group_member = db_fetch_object($members_of_group);
			}
			$table[] = array(t(get_group_name($activity_participant)), t("<img src=\"" . $image_path. $status_image[pi_activity_get_visible_status_of_activity($node_details->inquiry_id, $node_details->activity_id, $group_member->uid)] . "\"/>"));
		}
	}
	$content .= theme('table', $headings, $table);
	return $content;
}

function stage_selector_link ($inquiry_id, $uid) {

	$current_stage = get_current_stage_of_inquiry_and_user ($inquiry_id, $uid);
	if (isset($current_stage->stage_id)) {
		$current_stage_id = $current_stage->stage_id;
	}
	else {
		$current_stage_id = '';
	};

	$query = "SELECT nid FROM {node} WHERE type='pi_stage_selector'";
	$result = db_fetch_object(db_query($query));
	if ($result->nid) {
		$link = t("node/" . $result->nid . "/edit/" . $inquiry_id . "/" . $current_stage_id);
	}
	else {
		$link = t("node/add/pi-stage-selector/" . $inquiry_id . "/" . $current_stage_id);
	}
	return $link;
}

function build_teacher_tool_link($item, $inquiry_id, $stage_id) {
	if (!$inquiry_id) {
		$query = "SELECT inquiry_id FROM {pi_current_stage}";
		$result = db_fetch_object(db_query($query));
		$inquiry_id = $result->inquiry_id;
	}
	if($stage_id) {
		return t($item . "///" . $inquiry_id . "/" . $stage_id . "//");
	}
	else {
		return t($item . "///" . $inquiry_id . "///");
	}
}

function get_user_name($uid){
	$query = "SELECT * FROM {users} WHERE uid = %d";
	$object = db_fetch_object(db_query($query, $uid));
	return $object->name;
}

function get_group_name($gid){
	$query = "SELECT * FROM {og} WHERE nid = %d";
	$object = db_fetch_object(db_query($query, $gid));
	return $object->og_description;
}

function get_status_of_group($inquiry_id, $activity_id, $gid){
	$status_query = "SELECT * FROM {pi_activity_status} WHERE inquiry_id = %d AND activity_id = %d AND gid = %d ORDER BY pi_activity_status.pas_id DESC";
	$object = db_fetch_object(db_query($status_query, $inquiry_id, $activity_id, $gid));
	return $object->visible_status;
}

function get_status_of_user_in_group($inquiry_id, $activity_id, $uid, $gid){
	$status_query = "SELECT * FROM {pi_activity_status} WHERE inquiry_id = %d AND activity_id = %d AND uid = %d AND gid = %d";
	$object = db_fetch_object(db_query($status_query, $inquiry_id, $activity_id, $uid, $gid));
	if($object){
		return $object->visible_status;
	}
	else{
		return get_status_of_group($inquiry_id, $activity_id, $gid);
	}
}

function get_status_of_user($inquiry_id, $activity_id, $uid){
	$status_query = "SELECT * FROM {pi_activity_status} WHERE inquiry_id = %d AND activity_id = %d AND uid = %d";
	$object = db_fetch_object(db_query($status_query, $inquiry_id, $activity_id, $uid));
	return $object->visible_status;
}
